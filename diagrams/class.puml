@startuml

class Intervalle {
    - start: DateTime
    - end: DateTime
    + contains(datetime: DateTime): boolean
}

class Command {
    - type: CommandType
    - data: any
}

enum CommandType {
    TURN_ON
    TURN_OFF
    SET_TEMPERATURE
    SET_ROUTINE
    SET_INTERVAL
    OPEN_VALVES
    CLOSE_VALVES
}

class PredictionResult {
    - result: any
}

package firebase {
    class Firebase {
        + storeData(data: any): boolean
    }
}


class Hardware {
    + setFans(status: boolean): boolean
    + setRoutine(interval: Intervalle, temperature: double): boolean
    + manualSwitch(status: boolean): boolean
    + setInterval(interval: Intervalle): boolean
    + openValves(status: boolean): boolean
}

class Application {
    - firebase: Firebase
    - oraclist: Oraclist
    - communicator: CommunicatorMQTT
    - controller: Controller

    + setRoutine(interval: Intervalle, temperature: double): boolean
    + setInterval(interval: Intervalle): boolean
    + getProducedEnergy(): double
    + makePrediction(data: any): PredictionResult
    + sendCommand(command: Command): boolean
}

package external_prediction {
    class Oraclist {
        + makePrediction(data: any): PredictionResult
    }
}

package controller {
    class Controller {
        + handleRequest(request: HttpRequest): HttpResponse
    }
}

class CommunicatorMQTT {
    + sendCommand(command: Command): boolean
}

Application -- Oraclist
Application -- CommunicatorMQTT
Application -- Controller

CommunicatorMQTT -- Controller
CommunicatorMQTT -- Hardware
CommunicatorMQTT ..> Firebase: <<use>>

Command -- CommandType

@enduml
